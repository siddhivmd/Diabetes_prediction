# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uZEkF5hC5ZnOpPvE-6bifp2IWhXqtpcL
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('diabetes.csv')



pd.read_csv

diabetes_dataset.head()

# number of rows and Columns in this dataset
diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

x=diabetes_dataset.drop(columns='Outcome',axis=1)
y=diabetes_dataset['Outcome']

print(x)

print(y)

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print(standardized_data)

x=standardized_data
y=diabetes_dataset['Outcome']

print(x)
print(y)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

classifier = svm.SVC(kernel='linear')

classifier.fit(x_train,y_train)

x_train_prediciton = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediciton,y_train)

print('accuracy score of the training data : ', training_data_accuracy)

x_test_prediciton = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediciton,y_test)

print('accuracy score of the training data : ', test_data_accuracy)

input_data = (5,166,72,19,175,25.8,0.587,51)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

import pickle

# Save the model
filename = 'trained_model.pkl'
pickle.dump(classifier, open(filename, 'wb'))

# Save the scaler as well (needed for input preprocessing)
scaler_filename = 'scaler.pkl'
pickle.dump(scaler, open(scaler_filename, 'wb'))

